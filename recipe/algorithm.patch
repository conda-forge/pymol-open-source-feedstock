diff --git a/contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp b/contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp
index efaede65..7c098eed 100644
--- a/contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp
+++ b/contrib/uiuc/plugins/molfile_plugin/src/maeffplugin.cpp
@@ -66,6 +66,7 @@ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <string>
 #include <stdexcept>
 #include <vector>
+#include <algorithm>
 
 #ifdef DESRES_WIN32
 #define ssize_t int
@@ -94,14 +95,14 @@ namespace {
        */
       typedef enum {
         DONE = 0,
-        SKIPWHITE,  // 1 
+        SKIPWHITE,  // 1
         INCOMMENT,  //  2
         CHOOSEKIND,  // 3
         SINGLECHAR,  // 4
-        STARTSTRING,  // 5 
+        STARTSTRING,  // 5
         INSTRING,  // 6
-        ESCAPE,  // 7 
-        STARTOTHER,  // 8 
+        ESCAPE,  // 7
+        STARTOTHER,  // 8
         CONTINUEOTHER  // 9
       } action_t;
 
@@ -227,7 +228,7 @@ Tokenizer::~Tokenizer() {
  * INCOMMENT state, it looks for end-of-line before
  * returning to SKIPWHITE.  Similarly, all tokens are
  * defined using this one-character lookahead.
- * @return The current (possibly new) token 
+ * @return The current (possibly new) token
  */
 const char * Tokenizer::token(bool ignore_single) {
   // -----------------------------------------------
@@ -235,7 +236,7 @@ const char * Tokenizer::token(bool ignore_single) {
   // is called.
   // -----------------------------------------------
   if (m_isfresh) return m_token;
-  
+
   // -----------------------------------------------
   // End of file simply returns an empty string
   // -----------------------------------------------
@@ -243,7 +244,7 @@ const char * Tokenizer::token(bool ignore_single) {
   // begin at start of token space
   char * ptr = m_token;
   m_isfresh = true;
-  
+
   unsigned state = SKIPWHITE;
   char c = peek();
   bool good = false;
@@ -287,7 +288,7 @@ const char * Tokenizer::token(bool ignore_single) {
       if (issingle(c)) {
         if (ignore_single)
           state = STARTOTHER;
-        else  
+        else
           state = SINGLECHAR;
       } else if (c == '"') {
         state = STARTSTRING;
@@ -354,12 +355,12 @@ const char * Tokenizer::token(bool ignore_single) {
       break;
     }
   }
-  
+
   // -----------------------------------------------
   // Maybe we just read trailing whitespace...
   // -----------------------------------------------
   if (!good) *m_token = '\0';
-  
+
   return m_token;
 }
 
@@ -531,7 +532,7 @@ static struct element amu[] = {
 
 static const int nelements = sizeof(amu)/sizeof(amu[0]);
 
-static std::pair<int, const char *> 
+static std::pair<int, const char *>
 find_element_by_amu(double target) {
   int left = 0;
   int right = nelements-1;
@@ -553,7 +554,7 @@ find_element_by_amu(double target) {
   }
 
   // -----------------------------------------------
-  // CAUTION: at this point, the meanings of 
+  // CAUTION: at this point, the meanings of
   // left and right are switched (i.e. left >= right,
   // see the while() loop above if you don't believe me!
   // -----------------------------------------------
@@ -571,7 +572,7 @@ find_element_by_amu(double target) {
   return std::pair<int, const char *>( right+1, amu[left].abbreviation );
 }
 
-static std::pair<double, const char *> 
+static std::pair<double, const char *>
 find_element_by_atomic_number(int target) {
   if (target < 1) target=1;
   if (target >= nelements) target = nelements-1;
@@ -606,7 +607,7 @@ namespace {
     bond_t() {}
     bond_t(int f, int t, float o) : from(f), to(t), order(o) {}
   };
-  
+
   struct pos_t {
     float x, y, z;
     pos_t() {}
@@ -685,7 +686,7 @@ namespace {
     std::vector<molfile_atom_t> particles; // for writing
     CtMap ctmap;
 
-    Handle() 
+    Handle()
     : eof(false), stage1(0), stage2(0), nparticles(0) {
       for (int i=0; i<3; i++) A[i] = B[i] = C[i] = 0;
       A[0] = 1;
@@ -798,7 +799,7 @@ namespace {
 #define GET_STR( val_, arr_) do { get_str(val_, arr_, sizeof(arr_)); } while(0)
 
   class AtomArray : public Array {
-    int i_name, i_resname, i_resid, i_x, i_y, i_z, i_vx, i_vy, i_vz, 
+    int i_name, i_resname, i_resid, i_x, i_y, i_z, i_vx, i_vy, i_vz,
         i_inscode,
         i_radius,
         i_bfactor,
@@ -810,10 +811,10 @@ namespace {
     int &natoms;
 
   public:
-    AtomArray(Handle *h_, int ct) 
+    AtomArray(Handle *h_, int ct)
     : Array(h_, ct),
-      i_name(-1), i_resname(-1), i_resid(-1), 
-      i_x(-1), i_y(-1), i_z(-1), 
+      i_name(-1), i_resname(-1), i_resid(-1),
+      i_x(-1), i_y(-1), i_z(-1),
       i_vx(-1), i_vy(-1), i_vz(-1),
       i_inscode(-1),
       i_radius(-1),
@@ -883,11 +884,11 @@ namespace {
         }
       }
       if (bad_name && a.atomicnumber>0) {
-        strncpy( a.name, 
+        strncpy( a.name,
                  find_element_by_atomic_number(a.atomicnumber).second,
                  sizeof(a.name) );
       }
-      
+
       // if we didn't get a segid, encode the ct index.
       if (!strlen(a.segid)) {
         snprintf(a.segid, 4, "C%d", m_ct);
@@ -916,9 +917,9 @@ namespace {
     int i_mass, i_charge, i_type;
     std::vector<site> &sites;
   public:
-    SitesArray(Handle *h_, int ct) 
+    SitesArray(Handle *h_, int ct)
     : Array(h_, ct), i_mass(-1), i_charge(-1), i_type(-1),
-      sites(h->ctmap[ct].sites) 
+      sites(h->ctmap[ct].sites)
     {}
 
     virtual void set_schema( const Schema &schema ) {
@@ -941,7 +942,7 @@ namespace {
       sites.push_back(s);
     }
   };
-  
+
   struct BondArray : public Array {
     int i_from, i_to, i_order;
     std::vector<bond_t> &bonds;
@@ -1010,9 +1011,9 @@ namespace {
     int &npseudos;
 
   public:
-    PseudoArray(Handle *h_, int ct) 
+    PseudoArray(Handle *h_, int ct)
     : Array(h_, ct),
-      i_x(-1), i_y(-1), i_z(-1), 
+      i_x(-1), i_y(-1), i_z(-1),
       i_vx(-1), i_vy(-1), i_vz(-1),
       i_resname(-1), i_chain(-1), i_segid(-1), i_resid(-1),
       atoms( h->ctmap[m_ct].particles ),
@@ -1075,7 +1076,7 @@ namespace {
     std::string m_name;
     int i_ai, i_aj;
   public:
-    FepioArray(Handle *h_, int ct, const std::string &name) 
+    FepioArray(Handle *h_, int ct, const std::string &name)
     : Array(h_, ct), m_name(name), i_ai(-1), i_aj(-1) {}
 
     void set_schema( const Schema &schema ) {
@@ -1101,7 +1102,7 @@ namespace {
     bool m_full_system;
     std::vector<Array *> m_arrays;
 
-    Block(Handle *h_, const std::string &name_, int ct) 
+    Block(Handle *h_, const std::string &name_, int ct)
     : h(h_), m_name(name_), m_ct(ct), m_full_system(false) {
     }
 
@@ -1177,7 +1178,7 @@ namespace {
       std::string token = tokenizer.token();
       if (token[0] != 'b' && token[0] != 'i' && token[0] != 'r' && token[0] != 's') {
         std::stringstream str;
-        str << "Line " << tokenizer.line() << " predicted a schema, but " 
+        str << "Line " << tokenizer.line() << " predicted a schema, but "
             << token << " didn't start b_ i_ r_ or s_ ";
         throw std::runtime_error(str.str());
       }
@@ -1229,20 +1230,20 @@ namespace {
   }
 
   void predict_arraybody(Array& subarray, Tokenizer& tokenizer) {
-  
+
     // Read header
     tokenizer.predict("[");
     tokenizer.predict();
     tokenizer.predict("]");
     tokenizer.predict("{");
-  
+
     // Read schema
     Schema schema = predict_schema(tokenizer);
     subarray.set_schema(schema);
     size_t width = schema.size();
     Row row(width);
     tokenizer.predict(":::");
-  
+
     // Read rows
     while(tokenizer.not_a(":::")) {
       // throw away row index
@@ -1252,12 +1253,12 @@ namespace {
       }
       subarray.insert_row(row);
     }
-  
+
     tokenizer.predict(":::");
-  
+
     tokenizer.predict("}");
   }
-  
+
 
   void predict_nameless_block(std::string name,Block& M, Tokenizer& tokenizer) {
     // -----------------------------------------------
@@ -1266,8 +1267,8 @@ namespace {
     std::string tok = tokenizer.token();
     if (tok == "[") {
       predict_arraybody(M.new_array(name),tokenizer);
-    } 
-  
+    }
+
     // -----------------------------------------------
     // Otherwise just a block
     // -----------------------------------------------
@@ -1342,7 +1343,7 @@ namespace {
            << "  2.0.0" << std::endl
            << "}" << std::endl;
   }
-  void write_ct_header( std::ofstream &output, 
+  void write_ct_header( std::ofstream &output,
                         const double *A, const double *B, const double *C ) {
     output << "f_m_ct {\n"
            << "  s_m_title\n"
@@ -1394,7 +1395,7 @@ namespace {
     }
     output << "    :::\n";
 
-    for (std::map<size_t,int>::const_iterator i=atommap.begin(); 
+    for (std::map<size_t,int>::const_iterator i=atommap.begin();
         i!=atommap.end(); ++i) {
       const molfile_atom_t &a = atoms[i->first];
 
@@ -1452,14 +1453,14 @@ namespace {
                << vel[1+3*i->first] << ' '
                << vel[2+3*i->first] << ' ';
       }
-      output 
-             << std::endl;    
+      output
+             << std::endl;
     }
     output << "    :::\n";
     output << "  }\n";
   }
 
-  void write_ct_bonds( std::ofstream &output, 
+  void write_ct_bonds( std::ofstream &output,
                        const std::vector<bond_t> &bonds ) {
 
     // don't write 0-element m_bond (ev85392)
@@ -1470,7 +1471,7 @@ namespace {
            << "    i_m_order\n"
            << "    :::\n";
     for (unsigned i=0; i<bonds.size(); i++) {
-      output << "    " 
+      output << "    "
              << i+1 << ' '
              << bonds[i].from << ' '
              << bonds[i].to << ' '
@@ -1488,7 +1489,7 @@ namespace {
     output << "  }\n";
   }
 
-  void write_ct_sites( std::ofstream &output, 
+  void write_ct_sites( std::ofstream &output,
                        const std::vector<site>& sites ) {
 
     output << "    ffio_sites[" << sites.size() << "] {\n"
@@ -1524,22 +1525,22 @@ namespace {
                     << "      r_ffio_z_vel\n";
     output << "      :::\n";
 
-    for (std::map<size_t,int>::const_iterator i=pseudos.begin(); 
+    for (std::map<size_t,int>::const_iterator i=pseudos.begin();
         i!=pseudos.end(); ++i) {
       const molfile_atom_t &a = particles[i->first];
-      output << "      " 
+      output << "      "
              << i->second << ' '
-             << pos[0+3*i->first] << ' ' 
-             << pos[1+3*i->first] << ' ' 
-             << pos[2+3*i->first] << ' ' 
+             << pos[0+3*i->first] << ' '
+             << pos[1+3*i->first] << ' '
+             << pos[2+3*i->first] << ' '
              << quotify(a.name) << ' '
              << quotify(a.chain) << ' '
              << quotify(a.segid) << ' '
              << a.resid;
-      if (vel) { 
-        output << ' ' 
-               << vel[0+3*i->first] << ' ' 
-               << vel[1+3*i->first] << ' ' 
+      if (vel) {
+        output << ' '
+               << vel[0+3*i->first] << ' '
+               << vel[1+3*i->first] << ' '
                << vel[2+3*i->first];
       }
       output << "\n";
@@ -1559,15 +1560,15 @@ namespace {
 namespace {
 #if 1
   /*! Map m_bond records from stage2 into stage1
-   *  @param a2inv mapping from ct2 atom index to 
+   *  @param a2inv mapping from ct2 atom index to
    *  @param ct1 stage 1 ct
    *  @param ct2 stage 2 ct
    */
-  void fixup_m_bond(const std::map<int,int>& a2inv, 
+  void fixup_m_bond(const std::map<int,int>& a2inv,
                     ct_data &ct1, ct_data &ct2) {
 
     // go through every m_bond record in ct2 and add it to ct1 after
-    // mapping the atom indices.  
+    // mapping the atom indices.
     if (!ct2.bonds.size()) return; // nothing to do
 
     // Keep track of the bonds we already have
@@ -1640,7 +1641,7 @@ namespace {
           // copy site as well
           stage1.sites.push_back( stage2.sites.at(aj-1));
           stage1.sites[stage1.sites.size()-1].charge = 0.0;
-          
+
           // copy position and velocity
           stage1.position.push_back( stage2.position.at(aj-1) );
           stage1.velocity.push_back( stage2.velocity.at(aj-1) );
@@ -1697,7 +1698,7 @@ namespace {
       if (nsites>0) {
         // check particle/site consistency
         if (nsites > nparticles ) {
-          fprintf(stderr, "ERROR: Too many ffio_sites records in ct %d\n", 
+          fprintf(stderr, "ERROR: Too many ffio_sites records in ct %d\n",
               i->first);
           delete h;
           return NULL;
@@ -1783,7 +1784,7 @@ namespace {
               strcpy( ct.particles[to].chain,   ct.particles[from].chain);
               strcpy( ct.particles[to].segid,   ct.particles[from].segid);
               ct.particles[to].resid = ct.particles[from].resid;
-              strncpy( ct.particles[to].type, v->second.funct.c_str(), 
+              strncpy( ct.particles[to].type, v->second.funct.c_str(),
                        sizeof(ct.particles[to].type ) );
 
               // add a pseudobond between the pseudo and the parent atom
@@ -1947,7 +1948,7 @@ namespace {
       std::map<size_t,int>::const_iterator ito=data.atommap.find(to);
       if (ifrom != data.atommap.end() && ito != data.atommap.end())
         data.bonds.push_back(bond_t(ifrom->second, ito->second, order));
-      else 
+      else
         ++skipped;
     }
     if (badbonds) {
@@ -2106,7 +2107,7 @@ int main(int argc, char *argv[]) {
   // write file
   v = open_file_write( argv[2], "mae", natoms );
   if (!v) return 1;
-  if (write_bonds(v, nbonds, &bond_from[0], &bond_to[0], &bond_order[0]) 
+  if (write_bonds(v, nbonds, &bond_from[0], &bond_to[0], &bond_order[0])
       != MOLFILE_SUCCESS) return 1;
   if (write_structure( v, optflags, &atoms[0] ) != MOLFILE_SUCCESS) return 1;
   if (write_timestep( v, ts ) != MOLFILE_SUCCESS ) return 1;
diff --git a/layer0/Block.h b/layer0/Block.h
index a9173bd2..91fba37e 100644
--- a/layer0/Block.h
+++ b/layer0/Block.h
@@ -18,6 +18,7 @@ Z* -------------------------------------------------------------------
 #ifndef _H_Block
 #define _H_Block
 
+#include <algorithm>
 #include <vector>
 #include<utility>
 
diff --git a/layer1/Extrude.cpp b/layer1/Extrude.cpp
index f465facc..954bc0e5 100644
--- a/layer1/Extrude.cpp
+++ b/layer1/Extrude.cpp
@@ -14,6 +14,7 @@ I* Additional authors of this source file include:
 -*
 Z* -------------------------------------------------------------------
 */
+#include <algorithm>
 
 #include"os_predef.h"
 #include"os_std.h"
diff --git a/layer1/PyMOLObject.cpp b/layer1/PyMOLObject.cpp
index 595ba01a..cf540d72 100644
--- a/layer1/PyMOLObject.cpp
+++ b/layer1/PyMOLObject.cpp
@@ -14,6 +14,8 @@ I* Additional authors of this source file include:
 -*
 Z* -------------------------------------------------------------------
 */
+#include <algorithm>
+
 #include"os_python.h"
 
 #include"os_predef.h"
diff --git a/layer1/SceneMouse.cpp b/layer1/SceneMouse.cpp
index 2f1fc4b3..07e8c86a 100644
--- a/layer1/SceneMouse.cpp
+++ b/layer1/SceneMouse.cpp
@@ -1,3 +1,5 @@
+#include <algorithm>
+
 #include "SceneMouse.h"
 #include "ButMode.h"
 #include "Editor.h"
diff --git a/layer1/ScenePicking.cpp b/layer1/ScenePicking.cpp
index 74b4c6a0..806629e2 100644
--- a/layer1/ScenePicking.cpp
+++ b/layer1/ScenePicking.cpp
@@ -1,3 +1,4 @@
+#include <algorithm>
 
 
 #include"Base.h"
diff --git a/layer1/ScrollBar.cpp b/layer1/ScrollBar.cpp
index 6c6d7f3f..066bd683 100644
--- a/layer1/ScrollBar.cpp
+++ b/layer1/ScrollBar.cpp
@@ -14,6 +14,8 @@ I* Additional authors of this source file include:
 -*
 Z* -------------------------------------------------------------------
 */
+#include <algorithm>
+
 #include"os_gl.h"
 #include"Base.h"
 #include"Block.h"
diff --git a/layer2/ObjectDist.cpp b/layer2/ObjectDist.cpp
index 53edb32d..d8531db8 100644
--- a/layer2/ObjectDist.cpp
+++ b/layer2/ObjectDist.cpp
@@ -14,6 +14,8 @@ I* Additional authors of this source file include:
 -*
 Z* -------------------------------------------------------------------
 */
+#include <algorithm>
+
 #include"os_python.h"
 
 #include"os_predef.h"
